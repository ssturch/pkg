// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package xpgx

import (
	"context"

	"github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTransactional creates a new instance of MockTransactional. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactional(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactional {
	mock := &MockTransactional{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactional is an autogenerated mock type for the Transactional type
type MockTransactional struct {
	mock.Mock
}

type MockTransactional_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactional) EXPECT() *MockTransactional_Expecter {
	return &MockTransactional_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type MockTransactional
func (_mock *MockTransactional) BeginTx(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error) {
	ret := _mock.Called(ctx, txOptions)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) (pgx.Tx, error)); ok {
		return returnFunc(ctx, txOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.TxOptions) pgx.Tx); ok {
		r0 = returnFunc(ctx, txOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.TxOptions) error); ok {
		r1 = returnFunc(ctx, txOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactional_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockTransactional_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx
//   - txOptions
func (_e *MockTransactional_Expecter) BeginTx(ctx interface{}, txOptions interface{}) *MockTransactional_BeginTx_Call {
	return &MockTransactional_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, txOptions)}
}

func (_c *MockTransactional_BeginTx_Call) Run(run func(ctx context.Context, txOptions pgx.TxOptions)) *MockTransactional_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.TxOptions))
	})
	return _c
}

func (_c *MockTransactional_BeginTx_Call) Return(tx pgx.Tx, err error) *MockTransactional_BeginTx_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockTransactional_BeginTx_Call) RunAndReturn(run func(ctx context.Context, txOptions pgx.TxOptions) (pgx.Tx, error)) *MockTransactional_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}
